#!/bin/bash
#
# Script for simulating dynamic network conditions 
#
#
#
#
######################

display_help () {
  printf "%b \n" "\033[1m"NAME"\033[0m"
  printf "\t%s - Script to simulate network conditions of system on the edge\n" $(basename $0)
  printf "\n%b \n" "\033[1m"SYNOPSIS"\033[0m"
  printf "\t%b \n" "\033[1m""$(basename $0) -r""\033[0m"
  printf "\t%b \n" "\033[1m""$(basename $0) -h""\033[0m"
  printf "\t%b [%b]\n" "\033[1m""$(basename $0) -d""\033[0m" "\033[4m"ARGUMENTS"\033[0m"
  printf "\n%b \n" "\033[1m"DESCRIPTION"\033[0m"
  printf "\t This script is used to simulate network conditions of systems on the edge. Such as: \n" 
  printf "\t\t %b Adding a delay on a specific link between nodes that increases at some rate %b to simulate a node getting further away\n" "\033[1m""-""\033[0m" "\033[1m""r""\033[0m"
  printf "\t\t %b Decreasing bandwidth to simulate constrained network conditions on the edge\n" "\033[1m""-""\033[0m"
  printf "\t\t %b Simulating a node leaving and re-joining the cluster at varying speeds\n" "\033[1m""-""\033[0m"
  printf "\n"
  printf "\t %b [%b], \n\t\tReset the network conditions of node %b back to normal \n\n" "\033[1m""-r""\033[0m" "\033[4m"IP"\033[0m" "\033[1m"IP"\033[0m"
  printf "\t %b,\tDisplay this help message again \n\n" "\033[1m""-h""\033[0m"
  printf "\t %b [%b] [%b] [%b],\n\t\tAdd a delay to a node up to a given max delay and with a given rate of increase per second\n" "\033[1m""-d""\033[0m" "\033[4m"IP"\033[0m" "\033[4m""MAX DELAY""\033[0m" "\033[4m"RATE"\033[0m"
  printf "\n%b \n" "\033[1m"EXAMPLES"\033[0m"
}

continue_delay () {
  if (( $( echo "$max_delay == -1" | bc -l ) )); then
    return 0
  else 
    return $(echo "$delay >= $max_delay" | bc -l )
  fi
}

get_ip_and_device () {
  ## In awk FNR is the a variable that represents the number of records/lines to read
  ip=$(ping -c 1 $1 | awk 'FNR == 1 {print $3}' | sed -e 's/^.//' -e 's/.$//')
  ## Network interface is
  dev=$(ip route get $ip | awk 'FNR == 1 {print $3}')
}

if (( $# < 1 )); then
  echo "Invalid Number of Arguments."
  echo "Use '-h' to display help."
  exit
fi


##
# Reset Network changes
##
if [ $1 == '-r' ] ; then

  if (( $# < 2 )); then
    echo "Invalid Number of Arguments! The '-r' option requres 1 argument."
    echo "See '-h' for help."
    exit
  fi 
  get_ip_and_device $2

  echo "Resetting Network Changes..."
  ssh -T -o StrictHostKeyChecking=no $ip "sudo tc qdisc del dev $dev root" 2>&1

##
# Add additional delay to node
# Note: The delay is added ontop of whatever network delay is already there
##
elif [ $1 == '-d' ] ; then
  if (( $# < 4 )); then
    echo "Invalid number of arguments! '-d' requires 3 arguments. See '-h' for help."
  else
    get_ip_and_device $2
    delay=0.1
    max_delay=$3
    rate=$4

    ##
    # Initial delay of 0.1
    # if MAX_DELAY is < 0 keep going indefinitely
    # else go until delay >= MAX_DELAY
    ##
    echo "Current Additional Network Delay is: $delay" 
    ssh -T -o StrictHostKeyChecking=no $ip "sudo tc qdisc add dev $dev root netem delay ${delay}ms"
    while continue_delay
    do
     sleep 1
     delay=$( echo "$delay+$rate" | bc -l )
     echo "Current Additional Network Delay is: $delay" 
     ssh -T -o StrictHostKeyChecking=no $ip "sudo tc qdisc change dev $dev root netem delay ${delay}ms"
    done

    ## SSH in and add a delay
    #ssh -T -o StrictHostKeyChecking=no node1 << _remote_commands
    #sudo tc qdisc add dev $dev root netem delay 100ms
    #_remote_commands
  fi
elif [ $1 == '-h' ] ; then
  display_help
else
  echo "Unknown Argument!"
  echo "Use '-h' to display help."
fi


